AWSTemplateFormatVersion: '2010-09-09'
Description: 'UK Home Improvement Platform - Simple Complete Stack'

Parameters:
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda code
  LambdaCodeKey:
    Type: String
    Description: S3 key for Lambda code zip file

Resources:
  # DynamoDB Tables
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: uk-home-projects
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: uk-home-documents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProjectIdIndex
          KeySchema:
            - AttributeName: projectId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: uk-home-documents-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BuilderProjectAccessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: uk-home-builder-access
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: builderId
          AttributeType: S
      KeySchema:
        - AttributeName: projectId
          KeyType: HASH
        - AttributeName: builderId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: BuilderIdIndex
          KeySchema:
            - AttributeName: builderId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: uk-home-audit-logs
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  QuestionnaireTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: uk-home-questionnaire-sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProjectIdIndex
          KeySchema:
            - AttributeName: projectId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: uk-home-users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: custom:user_type
          AttributeDataType: String
          Required: false
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: uk-home-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # Lambda Execution Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: 
                  - !GetAtt ProjectsTable.Arn
                  - !Sub '${ProjectsTable.Arn}/index/*'
                  - !GetAtt DocumentsTable.Arn
                  - !Sub '${DocumentsTable.Arn}/index/*'
                  - !GetAtt BuilderProjectAccessTable.Arn
                  - !Sub '${BuilderProjectAccessTable.Arn}/index/*'
                  - !GetAtt AuditLogTable.Arn
                  - !GetAtt QuestionnaireTable.Arn
                  - !Sub '${QuestionnaireTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                Resource: !Sub '${DocumentsBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt DocumentsBucket.Arn
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/anthropic.claude-3-haiku-20240307-v1:0'
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/anthropic.claude-3-opus-20240229-v1:0'
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0'
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/amazon.titan-text-express-v1'
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/meta.llama2-13b-chat-v1'
                  - 'arn:aws:bedrock:eu-west-2::foundation-model/meta.llama2-70b-chat-v1'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !GetAtt UserPool.Arn

  # Lambda Function
  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: uk-home-api
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          PROJECTS_TABLE: !Ref ProjectsTable
          BUILDER_ACCESS_TABLE: !Ref BuilderProjectAccessTable
          AUDIT_LOG_TABLE: !Ref AuditLogTable
          QUESTIONNAIRE_TABLE: !Ref QuestionnaireTable
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          DOCUMENTS_TABLE: !Ref DocumentsTable
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Timeout: 30

  # API Gateway
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: uk-home-api

  # API Gateway Resource for proxy
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method for proxy
  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'

  # API Gateway Method for root
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !GetAtt Api.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*'

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiProxyMethod
      - ApiRootMethod
    Properties:
      RestApiId: !Ref Api
      StageName: prod

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # S3 Bucket Policy
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

  # CloudFront Distribution
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !Sub '${FrontendBucket}.s3-website.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100

Outputs:
  ApiUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  FrontendBucket:
    Value: !Ref FrontendBucket
    
  CloudFrontUrl:
    Value: !Sub 'https://${CloudFront.DomainName}'
    
  CloudFrontId:
    Value: !Ref CloudFront
