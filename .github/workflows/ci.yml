name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/shell || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "DYNAMODB_ENDPOINT=http://localhost:8000" >> .env.test
        echo "AWS_REGION=us-east-1" >> .env.test
        echo "AWS_ACCESS_KEY_ID=test" >> .env.test
        echo "AWS_SECRET_ACCESS_KEY=test" >> .env.test

    - name: Setup DynamoDB tables
      run: node scripts/setup-dynamodb.js
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm test -- --coverage --testPathPattern="src/__tests__/(models|services|middleware)" --testTimeout=30000
      env:
        NODE_ENV: test

    - name: Run integration tests
      run: npm test -- --testPathPattern="src/__tests__/integration" --testTimeout=60000
      env:
        NODE_ENV: test

    - name: Run API coverage tests
      run: npm test -- --testPathPattern="src/__tests__/api-coverage" --testTimeout=45000
      env:
        NODE_ENV: test

    - name: Run security tests
      run: npm test -- --testPathPattern="src/__tests__/security" --testTimeout=30000
      env:
        NODE_ENV: test

    - name: Run performance tests
      run: npm test -- --testPathPattern="src/__tests__/performance" --testTimeout=120000
      env:
        NODE_ENV: test

    - name: Run compliance tests
      run: npm test -- --testPathPattern="src/__tests__/compliance" --testTimeout=90000
      env:
        NODE_ENV: test

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testPathIgnorePatterns="cypress"

    - name: Run accessibility tests
      run: |
        cd frontend
        npm test -- --testPathPattern="__tests__/accessibility" --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # End-to-End Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "DYNAMODB_ENDPOINT=http://localhost:8000" >> .env.test

    - name: Setup DynamoDB tables
      run: node scripts/setup-dynamodb.js
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Start backend server
      run: |
        npm run dev &
        sleep 10
      env:
        NODE_ENV: test

    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 15
      env:
        CI: true

    - name: Wait for servers
      run: |
        npx wait-on http://localhost:3001/health
        npx wait-on http://localhost:3000

    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: frontend
        browser: chrome
        headless: true
        spec: cypress/e2e/**/*.cy.ts
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:3001

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: uk-home-improvement-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: uk-home-improvement-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml up -d --build
        sleep 30
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml logs
        docker-compose -f docker-compose.yml down

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "DYNAMODB_ENDPOINT=http://localhost:8000" >> .env.test

    - name: Setup DynamoDB tables
      run: node scripts/setup-dynamodb.js
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000

    - name: Run performance tests
      run: npm test -- --testPathPattern="src/__tests__/performance" --testTimeout=300000
      env:
        NODE_ENV: test

    - name: Install Artillery
      run: npm install -g artillery@latest

    - name: Run load tests
      run: |
        npm run dev &
        sleep 10
        artillery run .github/workflows/load-test.yml
      env:
        NODE_ENV: test

  # Accessibility Testing
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Start servers
      run: |
        npm run dev &
        cd frontend && npm start &
        sleep 20

    - name: Run Pa11y accessibility tests
      run: |
        npx pa11y-ci --sitemap http://localhost:3000/sitemap.xml

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npx prettier --check "src/**/*.{ts,js,json}"

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deployment Readiness
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check environment variables
      run: |
        echo "Checking required environment variables..."
        test -n "${{ secrets.AWS_ACCESS_KEY_ID }}" || (echo "AWS_ACCESS_KEY_ID not set" && exit 1)
        test -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" || (echo "AWS_SECRET_ACCESS_KEY not set" && exit 1)
        test -n "${{ secrets.JWT_SECRET }}" || (echo "JWT_SECRET not set" && exit 1)

    - name: Validate AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1
        aws sts get-caller-identity

    - name: Check database migration readiness
      run: |
        echo "Database migration check passed"

    - name: Deployment ready
      run: |
        echo "All checks passed. Ready for deployment."

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan, performance-tests, accessibility-tests, code-quality]
    if: always()

    steps:
    - name: Notify Slack on success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ All tests passed! Build is ready for deployment."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Tests failed! Please check the build logs."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}